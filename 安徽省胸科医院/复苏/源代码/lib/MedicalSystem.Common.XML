<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MedicalSystem.Common</name>
    </assembly>
    <members>
        <member name="T:MedicalSystem.Common.DateTimeManage.CNDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnFtvl">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.CNDate.cnFtvs">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.ChinaDate">
            <summary>
            公历转农历
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.GetMondayDateByDate(System.DateTime)">
            <summary>
            根据日期值获得周一的日期
            </summary>
            <param name="dt">输入日期</param>
            <returns>周一的日期</returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChinaDate.getChinaDate(System.DateTime)">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="leapMonthFlag">闰月标志</param>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary> 
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.newCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseTwentyFourPrevDay">
            <summary>
            当前日期前一个最近节气
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.ChineseTwentyFourNextDay">
            <summary>
            当前日期后一个最近节气
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.DateTimeManage.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.TimeHelper">
            <summary>
            时间类
            1、SecondToMinute(int Second) 把秒转换成分钟
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <param name="Second">秒</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            时间差
            </summary>
            <param name="DateTime1">时间1</param>
            <param name="DateTime2">时间2</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.TimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.AppConfigFileHelper">
            <summary>
            AppConfig操作类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.SetValue(System.String,System.String,System.String)">
            <summary>
            设置节点的值，若该节点不存在，则创建一个新的节点。
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="fileName">文件路径</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.GetValue(System.String,System.String)">
            <summary>
            获取节点的值
            </summary>
            <param name="key">key</param>
            <param name="fileName">文件路径</param>
            <returns>值</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.saveConfigDoc(System.Xml.XmlDocument,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="cfgDoc">XmlDocument</param>
            <param name="cfgDocPath">文件路径</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.RemoveElement(System.String,System.String)">
            <summary>
            移除节点
            </summary>
            <param name="elementKey">key</param>
            <param name="fileName">文件路径</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.ModifyElement(System.String,System.String)">
            <summary>
            修改节点的值
            </summary>
            <param name="elementKey">key</param>
            <param name="fileName">文件路径</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.Read(System.String)">
            <summary>
            读取设置
            </summary>
            <param name="key">主键</param>
            <returns>对应值</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.Read(System.String,System.String)">
            <summary>
            读取设置
            </summary>
            <param name="fileName">文件名</param>
            <param name="key">主键</param>
            <returns>对应值</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.Save(System.String,System.String)">
            <summary>
            保存设置
            </summary>
            <param name="key">主键</param>
            <param name="value">对应值</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.AppConfigFileHelper.Save(System.String,System.String,System.String)">
            <summary>
            保存设置
            </summary>
            <param name="fileName">文件名</param>
            <param name="key">主键</param>
            <param name="value">对应值</param>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.AppConfigFileHelper.ConnectionStringSettingsCollections">
            <summary>
            系统配置的连接字符串集
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.CSVHelper.dt2csv(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出报表为Csv
            </summary>
            <param name="dt">DataTable</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题,逗号分隔</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.CSVHelper.csv2dt(System.String,System.Int32,System.Data.DataTable)">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始</param>
            <param name="dt"></param>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.ExcelFileHelper">
            <summary>
            Excel文件操作类
            </summary>
            <remarks> 使用第三方组件Aspose.Cells.dll脱离office</remarks>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.ExportExcelWithAspose(System.Data.DataTable,System.Data.DataTable,System.String)">
             <summary>
             导出Excel
             </summary>
             <param name="dt">数据源</param>
             <param name="dtColumn">导出列</param>
             <param name="path">路径</param>
             <example>
             <para> Stream stream = new MemoryStream(new byte[]);</para>
             <para>ExcelFileHelper.ExportExcelWithAspose(new DataTable(), new DataTable(), "D:\\demo.xlsx");</para>
             </example>
            <remarks>
            <para>1、参数dtColumn导出列，必须包含FieldName(字段名称)、Title(标题)两个字段</para>
            <para>2、Title包含"时间"自动转换格式"HH:mm",包含"日期"自动转换为"yyyy-MM-dd"</para>
            </remarks>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.GetHeadWidth(MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode)">
             <summary>
            获取猎头宽度
             </summary>
             <param name="data"></param>
             <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.ExportExcelWithAspose(System.Data.DataTable,MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode,System.String)">
            <summary>
            导出多层列头
            </summary>
            <param name="dt">数据源</param>
            <param name="nroot">列头节点</param>
            <param name="path">导出路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.ExportExcelForModel(System.Data.DataTable,System.IO.Stream,System.String)">
            <summary>
            按模板导出Excle
            </summary>
            <param name="dt">数据表</param>
            <param name="model">模板流</param>
            <param name="path">保存路径</param>
            <example>
            <para>Stream stream = new MemoryStream(new byte[]);</para>
            <para>ExcelFileHelper.ExportExcelForModel(new DataTable(), stream, "D:\\demo.xlsx");</para>
            </example>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.ExportExcelWithAspose(System.Data.DataTable,System.Data.DataTable)">
             <summary>
             导出Excel
             </summary>
             <param name="dt">数据源</param>
             <param name="dtColumn">导出列</param>
             <example>
             <para> Stream stream = new MemoryStream(new byte[]);</para>
             <para>ExcelFileHelper.ExportExcelWithAspose(new DataTable(), new DataTable());</para>
             </example>
            <remarks>
            <para>1、参数dtColumn导出列，必须包含FieldName(字段名称)、Title(标题)两个字段</para>
            <para>2、Title包含"时间"自动转换格式"HH:mm",包含"日期"自动转换为"yyyy-MM-dd"</para>
            </remarks>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ExcelFileHelper.ExportExcelForModel(System.Data.DataTable,System.IO.Stream)">
            <summary>
            按模板导出Excle
            </summary>
            <param name="dt">数据表</param>
            <param name="model">模板流</param>
            <example>
            <para>Stream stream = new MemoryStream(new byte[]);</para>
            <para>ExcelFileHelper.ExportExcelForModel(new DataTable(), stream);</para>
            </example>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.maxDepth">
            <summary>
            最高深度，c
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode">
            <summary>
            节点类
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode.FieldName">
            <summary> 
            字段名
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.DataNode.SubDataNode">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.Head.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.Head.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.Head.Width">
            <summary>
            宽度，每列个数记作1
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.Head.Span">
            <summary>
            跨度
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.ExcelFileHelper.Head.StartLocation">
            <summary>
            开始位置
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.FileLibHelper">
            <summary>
            文件操作通用类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.GetMD5HashFromFile(System.String)">
            <summary>
            获取文件的MD5码
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回文件MD5码</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.SaveFile(System.String,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="text">内容</param>
            <param name="fileName">路径</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.FileToBytes(System.String)">
            <summary>
            将文件转换为byte数组
            </summary>
            <param name="path">文件地址</param>
            <returns>转换后的byte数组</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.BytesToFile(System.Byte[],System.String)">
            <summary>
            将byte数组转换为文件并保存到指定地址
            </summary>
            <param name="buff">byte数组</param>
            <param name="savepath">保存地址</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.CopyDirectory(System.String,System.String)">
            <summary>
            递归拷贝所有子目录。
            </summary>
            <param >源目录</param>
            <param >目的目录</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.CopyFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            拷贝目录下的所有文件到目的目录。
            </summary>
            <param >源路径</param>
            <param >目的路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.DeleteFile(System.String,System.String)">
            <summary>
            删除某一类文件
            </summary>
            <param name="path">路径</param>
            <param name="fileType">扩展 如*.bak</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.ReadFile(System.String,System.Int32,System.Int32)">
            <summary>
            获取文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="start">开始字节</param>
            <param name="lenth">结束字节</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.WriteFile(System.String,System.Int32,System.Byte[])">
            <summary>
            写入文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="start">开始字节</param>
            <param name="data">写入内容</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.GetExtendName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="p_str">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.GetAppPath">
            <summary>
            获取当前根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.FileLibHelper.GetFiles(System.String)">
            <summary>
            获取所有文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.PDFHelper">
             <summary>
             PDF操作类
             </summary>
             <![CDATA[
            PDFOperation pdf = new PDFOperation();
            pdf.Open(new FileStream(path, FileMode.Create));
            pdf.SetBaseFont(@"C:\Windows\Fonts\SIMHEI.TTF");
            pdf.AddParagraph("测试文档（生成时间：" + DateTime.Now + "）", 15, 1, 20, 0, 0);
            pdf.Close();
             ]]>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="type">页面大小(如"A4")</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="type">页面大小(如"A4")</param>
            <param name="marginLeft">内容距左边框距离</param>
            <param name="marginRight">内容距右边框距离</param>
            <param name="marginTop">内容距上边框距离</param>
            <param name="marginBottom">内容距下边框距离</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.SetBaseFont(System.String)">
            <summary>
            设置字体
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.SetFont(System.Single)">
            <summary>
            设置字体
            </summary>
            <param name="size">字体大小</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.SetPageSize(System.String)">
            <summary>
            设置页面大小
            </summary>
            <param name="type">页面大小(如"A4")</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.GetInstance(System.IO.Stream)">
            <summary>
            实例化文档
            </summary>
            <param name="os">文档相关信息（如路径，打开方式等）</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.Open(System.IO.Stream)">
            <summary>
            打开文档对象
            </summary>
            <param name="os">文档相关信息（如路径，打开方式等）</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.Close">
            <summary>
            关闭打开的文档
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.AddParagraph(System.String,System.Single)">
            <summary>
            添加段落
            </summary>
            <param name="content">内容</param>
            <param name="fontsize">字体大小</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.AddParagraph(System.String,System.Single,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            添加段落
            </summary>
            <param name="content">内容</param>
            <param name="fontsize">字体大小</param>
            <param name="Alignment">对齐方式（1为居中，0为居左，2为居右）</param>
            <param name="SpacingAfter">段后空行数（0为默认值）</param>
            <param name="SpacingBefore">段前空行数（0为默认值）</param>
            <param name="MultipliedLeading">行间距（0为默认值）</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.AddImage(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            添加图片
            </summary>
            <param name="path">图片路径</param>
            <param name="Alignment">对齐方式（1为居中，0为居左，2为居右）</param>
            <param name="newWidth">图片宽（0为默认值，如果宽度大于页宽将按比率缩放）</param>
            <param name="newHeight">图片高</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.AddAnchorReference(System.String,System.Single,System.String)">
            <summary>
            添加链接
            </summary>
            <param name="Content">链接文字</param>
            <param name="FontSize">字体大小</param>
            <param name="Reference">链接地址</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.PDFHelper.AddAnchorName(System.String,System.Single,System.String)">
            <summary>
            添加链接点
            </summary>
            <param name="Content">链接文字</param>
            <param name="FontSize">字体大小</param>
            <param name="Name">链接点名</param>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.XMLFileHelper">
            <summary>
            XML操作类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.GetXmlElement(System.String)">
            <summary>
            获取XmlElement元素
            </summary>
            <param name="file">XML文件路径</param>
            <returns>XmlElemen元素t</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.GetListForDic(System.String,System.String,System.String)">
            <summary>
            获取对应节的名称和值
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="attributeName">属性名称</param>
            <returns>键值对</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.GetKeyList(System.String,System.String,System.String)">
            <summary>
            获取对应节子节点Key
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="attributeName">属性名称</param>
            <returns>所有Key</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.GetValueList(System.String,System.String)">
            <summary>
            获取对应节的子节点Value
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <returns>所有Value</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.InsertKey(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个新节点
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="childNodeName">子节点名称</param>
            <param name="attributeName">属性名</param>
            <param name="key">属性Key</param>
            <param name="value">属性值</param>
            <returns>是否新增成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.DeleteKey(System.String,System.String,System.String,System.String)">
            <summary>
            删除节点
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="attributeName">属性名</param>
            <param name="key">属性Key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.UpdateValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            修改值
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="attributeName">属性名</param>
            <param name="key">属性Key</param>
            <param name="value">值</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.SelectKey(System.String,System.String,System.String,System.String)">
            <summary>
            选择key对应Value
            </summary>
            <param name="file">XML文件路径</param>
            <param name="selectNodeName">节点名称</param>
            <param name="attributeName">属性名</param>
            <param name="key">属性Key</param>
            <returns>对应Value</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xml">XML字符串</param>
            <returns>T</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.Deserialize(System.Type,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">类型</param>
            <param name="xml">XML字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.DeserializeForFileName(System.Type,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">类型</param>
            <param name="fileName">XML文件路径</param>
            <returns>对象</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="type">type</param>
            <param name="stream">Stream</param>
            <returns>对象</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.Serializer(System.Type,System.Object)">
            <summary>
            序列化
            </summary>
            <param name="type">类型</param>
            <param name="obj">对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.ConvertXMLFileToDataSet(System.String)">
            <summary>
            将xml文件转换为DataSet
            </summary>
            <param name="xmlFile">xml文件</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLFileHelper.ConvertDataSetToXMLFile(System.Data.DataSet,System.String)">
            <summary>
            将DataSet转换为xml文件
            </summary>
            <param name="xmlDS">DataSet</param>
            <param name="xmlFile">xml文件</param>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.DictXML">
            <summary>
            配置文件解析类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.DictXML.GetGroups(System.String)">
            <summary>
            获取配置XML分组的信息
            </summary>
            <param name="groupname">分组名称</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.DictXML.GetValue(System.String)">
            <summary>
            读取XML配置中指定节点的信息
            </summary>
            <param name="key">节点名称</param>
            <returns>返回指定节点的信息</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.DictXML.ExistsKey(System.String)">
            <summary>
            是否包含此Key
            </summary>
            <param name="key">节点名称</param>
            <returns>bool</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.DictXML.SetValue(System.String,System.String)">
            <summary>
            跟新节点
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.Model">
            <summary>
            所有模块
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.Group">
            <summary>
            获取所有分组
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.DictXML.DictModel">
            <summary>
            模块定义
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.DictModel.GroupName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.DictModel.Group">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.DictXML.DictGroup">
            <summary>
            分组定义
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.DictGroup.Key">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.DictXML.DictGroup.Value">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.XmlHelper">
            <summary>
            Xml的操作公共类
            </summary>    
        </member>
        <member name="F:MedicalSystem.Common.FileManage.XmlHelper._filePath">
            <summary>
            XML文件的物理路径
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.FileManage.XmlHelper._xml">
            <summary>
            Xml文档
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.FileManage.XmlHelper._element">
            <summary>
            XML的根节点
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.#ctor(System.String)">
            <summary>
            实例化XmlHelper对象
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.CreateXMLElement">
            <summary>
            创建XML的根节点
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.GetNode(System.String)">
            <summary>
            获取指定XPath表达式的节点对象
            </summary>        
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.GetValue(System.String)">
            <summary>
            获取指定XPath表达式节点的值
            </summary>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.GetAttributeValue(System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的属性值
            </summary>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
            <param name="attributeName">属性名</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.AppendNode(System.Xml.XmlNode)">
            <summary>
            1. 功能：新增节点。
            2. 使用条件：将任意节点插入到当前Xml文件中。
            </summary>        
            <param name="xmlNode">要插入的Xml节点</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.RemoveNode(System.String)">
            <summary>
            删除指定XPath表达式的节点
            </summary>        
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.Save">
            <summary>
            保存XML文件
            </summary>        
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.CreateRootElement(System.String)">
            <summary>
            创建根节点对象
            </summary>
            <param name="xmlFilePath">Xml文件的路径</param>        
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.GetValue(System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的值
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.GetAttributeValue(System.String,System.String,System.String)">
            <summary>
            获取指定XPath表达式节点的属性值
            </summary>
            <param name="xmlFilePath">Xml文件的相对路径</param>
            <param name="xPath">XPath表达式,
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem"
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点.
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性.
            </param>
            <param name="attributeName">属性名</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.IListToDataSet``1(System.Collections.Generic.List{``0})">
            <summary>
            <![CDATA[List<T> 转换成DataSet]]>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.DataSetToIList``1(System.Data.DataSet,System.Int32)">
            <summary>         、
            DataSet装换为泛型集合         
            </summary>         
            <typeparam name="T"></typeparam>         
            <param name="ds">DataSet</param>         
            <param name="tableIndex">待转换数据表索引</param>         
            <returns></returns>         
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XmlHelper.DataSetToIList``1(System.Data.DataSet,System.String)">
             <summary>         
             DataSet装换为泛型集合        
              </summary>     
             <typeparam name="T"></typeparam>   
            <param name="ds">DataSet</param>      
             <param name="tableName">待转换数据表名称</param>         
             <returns></returns>  
        </member>
        <member name="T:MedicalSystem.Common.FileManage.XMLProcess">
            <summary>
            XMLProcess
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.#ctor(System.String)">
            <summary>
             构造函数
            </summary>
            <param name="strPath">文件路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.XMLLoad">
            <summary>
            导入XML文件
            </summary>  
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.XMLLoad(System.String)">
            <summary>
            导入XML文件
            </summary>
            <param name="strPath">XML文件路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.GetXmlFullPath(System.String)">
            <summary>
            返回完整路径
            </summary>
            <param name="strPath">Xml的路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Read(System.String)">
            <summary>
            读取指定节点的数据
            </summary>
            <param name="node">节点</param>
            使用示列:
            XMLProsess.Read("/Node", "")
            XMLProsess.Read("/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Read(System.String,System.String)">
            <summary>
            读取指定路径和节点的串联值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Read(System.String,System.String,System.String)">
            <summary>
            读取指定路径和节点的属性值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']", "Attribute")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.ReadAllChildallValue(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.ReadAllChild(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.GetDataViewByXml(System.String,System.String)">
            <summary> 
            读取XML返回经排序或筛选后的DataView
            </summary>
            <param name="strWhere">筛选条件，如:"name='kgdiwss'"</param>
            <param name="strSort"> 排序条件，如:"Id desc"</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.GetDataSetByXml(System.String)">
            <summary>
            读取XML返回DataSet
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "Element", "", "Value")
            XMLProsess.Insert(path, "/Node", "Element", "Attribute", "Value")
            XMLProsess.Insert(path, "/Node", "", "Attribute", "Value")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Insert(System.String,System.String,System.String,System.String[][])">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="strList">由XML属性名和值组成的二维数组</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.WriteXmlByDataSet(System.String,System.String[],System.String[])">
            <summary>
            插入一行数据
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
            <param name="Columns">要插入行的列名数组，如：string[] Columns = {"name","IsMarried"};</param>
            <param name="ColumnValue">要插入行每列的值数组，如：string[] ColumnValue={"XML大全","false"};</param>
            <returns>成功返回true,否则返回false</returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Update(System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="node">节点</param>
            <param name="value">值</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Update(System.String,System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node","Value")
            XMLProsess.Insert(path, "/Node","Value")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改指定节点的属性值(静态)
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "", "Value")
            XMLProsess.Insert(path, "/Node", "Attribute", "Value")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.UpdateXmlRow(System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            更改符合条件的一条记录
            </summary>
            <param name="strXmlPath">XML文件路径</param>
            <param name="Columns">列名数组</param>
            <param name="ColumnValue">列值数组</param>
            <param name="strWhereColumnName">条件列名</param>
            <param name="strWhereColumnValue">条件列值</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Delete(System.String,System.String)">
            <summary>
            删除节点值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.DeleteXmlAllRows(System.String)">
            <summary>
            删除所有行
            </summary>
            <param name="strXmlPath">XML路径</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.DeleteXmlRowByIndex(System.String,System.Int32)">
            <summary>
            通过删除DataSet中指定索引行，重写XML以实现删除指定行
            </summary>
            <param name="strXmlPath">文件路径</param>
            <param name="iDeleteRow">要删除的行在DataSet中的Index值</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.XMLProcess.DeleteXmlRows(System.String,System.String,System.String[])">
            <summary>
            删除指定列中指定值的行
            </summary>
            <param name="strXmlPath">XML相对路径</param>
            <param name="strColumn">列名</param>
            <param name="ColumnValue">指定值</param>
        </member>
        <member name="P:MedicalSystem.Common.FileManage.XMLProcess.XMLPath">
            <summary>
            XML文件
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.ZipFileHelper">
            <summary>
            Gzip压缩文件类
            </summary>
            <remarks> 使用第三方组件ICSharpCode.SharpZipLib.dll实现文件GZip的压缩</remarks>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.ZipDirectory(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.Boolean)">
            <summary>
            归压缩文件夹的内部方法 
            </summary>
            <param name="folderToZip">要压缩的文件夹路径</param> 
            <param name="zipStream">压缩输出流</param> 
            <param name="parentFolderName">此文件夹的上级文件夹</param>
            <param name="isFirst">是否为第一次</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.ZipDirectory(System.String,System.String,System.String)">
            <summary> 
            压缩文件夹  
            </summary> 
            <param name="folderToZip">要压缩的文件夹路径</param> 
            <param name="zipedFile">压缩文件完整路径</param> 
            <param name="password">密码</param> 
            <returns>是否压缩成功</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.ZipDirectory(System.String,System.String)">
            <summary> 
            压缩文件夹 
            </summary> 
            <param name="folderToZip">要压缩的文件夹路径</param> 
            <param name="zipedFile">压缩文件完整路径</param> 
            <returns>是否压缩成功</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.ZipFile(System.String,System.String,System.String)">
            <summary> 
            压缩文件 
            </summary> 
            <param name="fileToZip">要压缩的文件全名</param> 
            <param name="zipedFile">压缩后的文件名</param> 
            <param name="password">密码</param> 
            <returns>压缩结果</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.ZipFile(System.String,System.String)">
            <summary> 
            压缩文件 
            </summary> 
            <param name="fileToZip">要压缩的文件全名</param> 
            <param name="zipedFile">压缩后的文件名</param> 
            <returns>压缩结果</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.Zip(System.String,System.String,System.String)">
            <summary> 
            压缩文件或文件夹 
            </summary> 
            <param name="fileToZip">要压缩的路径</param> 
            <param name="zipedFile">压缩后的文件名</param> 
            <param name="password">密码</param> 
            <returns>压缩结果</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.Zip(System.String,System.String)">
            <summary> 
            压缩文件或文件夹 
            </summary> 
            <param name="fileToZip">要压缩的路径</param> 
            <param name="zipedFile">压缩后的文件名</param> 
            <returns>压缩结果</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.UnZip(System.String,System.String,System.String)">
            <summary> 
            解压功能(解压压缩文件到指定目录) 
            </summary> 
            <param name="fileToUnZip">待解压的文件</param> 
            <param name="zipedFolder">指定解压目标目录</param> 
            <param name="password">密码</param> 
            <returns>解压结果</returns> 
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.UnZipFiles(System.String,System.String,System.String)">
            <summary>
            解压缩包（将压缩包解压到指定目录）
            </summary>
            <param name="zipedFileName">压缩包名称</param>
            <param name="unZipDirectory">解压缩目录</param>
            <param name="password">密码</param>
        </member>
        <member name="M:MedicalSystem.Common.FileManage.ZipFileHelper.UnZip(System.String,System.String)">
            <summary> 
            解压功能(解压压缩文件到指定目录) 
            </summary> 
            <param name="fileToUnZip">待解压的文件</param> 
            <param name="zipedFolder">指定解压目标目录</param> 
            <returns>解压结果</returns> 
        </member>
        <member name="E:MedicalSystem.Common.FileManage.ZipFileHelper.GetFileUZIPStatus">
            <summary>
            解压委托事件
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.FileManage.ZipFileHelper.Satatudelegate">
            <summary>
            解压委托
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.HttpHelper">
            <summary>
            后台发送http请求
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.GetHtml(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.GetData(MedicalSystem.Common.HttpManage.HttpItem,MedicalSystem.Common.HttpManage.HttpResult)">
            <summary>
            获取数据的并解析的方法
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetEncoding(MedicalSystem.Common.HttpManage.HttpItem,MedicalSystem.Common.HttpManage.HttpResult,System.Byte[])">
            <summary>
            设置编码
            </summary>
            <param name="item">HttpItem</param>
            <param name="result">HttpResult</param>
            <param name="ResponseByte">byte[]</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.GetByte">
            <summary>
            提取网页Byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetRequest(MedicalSystem.Common.HttpManage.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetCer(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetCerList(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetCookie(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetPostData(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.SetProxy(MedicalSystem.Common.HttpManage.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.HttpItem._MaximumAutomaticRedirections">
            <summary>
            设置请求将跟随的重定向的最大数目
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.WebProxy">
            <summary>
            设置代理对象，不想使用IE默认配置就设置为Null，而且不要设置ProxyIp
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ProxyIp">
            <summary>
            代理 服务IP ,如果要使用IE代理就设置为ieproxy
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ResultCookieType">
            <summary>
            Cookie返回类型,默认的是只返回字符串类型
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.MaximumAutomaticRedirections">
            <summary>
            设置请求将跟随的重定向的最大数目
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpItem.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:MedicalSystem.Common.HttpManage.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.ResultCookieType">
            <summary>
            Cookie返回类型
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.ResultCookieType.String">
            <summary>
            只返回字符串类型的Cookie
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.HttpManage.ResultCookieType.CookieCollection">
            <summary>
            CookieCollection格式的Cookie集合同时也返回String类型的cookie
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.JsonConvent">
            <summary>
            JsonConvent 转换
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.JsonConvent.GetJson``1(``0)">
            <summary>
            把对象序列化 JSON 字符串 
            实体类转换成 JSON 字符串   这是单个的 如果是实体类集合遍历集合来控制输出格式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象实体</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.JsonConvent.Dtb2Json(System.Data.DataTable)">
            <summary>
            将datatable转换为json  
            </summary>
            <param name="dtb">Dt</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="T:MedicalSystem.Common.HttpManage.JsonConvent.ModelConvertHelper`1">
             <summary>
             DataTable转换实体类   
             </summary>
             <![CDATA[     
             PropertyInfo 要用这个的引用 System.Reflection; 
            调用方式：IList<T> list = new List<T>(); 
            list = ModelConvertHelper<T>.ConvertToModel(DataTable);
             ]]>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:MedicalSystem.Common.HttpManage.JsonConvent.ModelConvertHelper`1.ConvertToModel(System.Data.DataTable)">
            <summary>
            DataTable转化Model
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:MedicalSystem.Common.StringManage.EcanConvertToCh">
            <summary>
            汉字转拼音类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.EcanConvertToCh.convertCh(System.String)">
            <summary>
            汉字转换成全拼的拼音
            </summary>
            <param name="Chstr">汉字字符串</param>
            <returns>转换后的拼音字符串</returns>
        </member>
        <member name="T:MedicalSystem.Common.StringManage.PinYin">
            <summary>
            拼音类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.PinYin.GetFirstLetter(System.String)">
            <summary>
            拼音
            </summary>
            <param name="hz"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.PinYin.GetCodstring(System.String)">
            <summary>
            取汉字拼音的首字母
            </summary>
            <param name="UnName">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="T:MedicalSystem.Common.SystemManage.CMDHelper">
            <summary>
            CMD命令执行类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.CMDHelper.AllocConsole">
            <summary>
            显示CMD窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.CMDHelper.FreeConsole">
            <summary>
            关闭CMD窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.CMDHelper.Execute(System.String,System.Int32)">
            <summary>
            执行DOS命令，返回DOS命令的输出
            </summary>
            <param name="command">dos命令</param>
            <param name="seconds">如果设定为0，则无限等待</param>
            <returns>返回DOS命令的输出</returns>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.CMDHelper.ExecCMD(System.String)">
            <summary>
            执行命令回显
            </summary>
            <param name="cmd">CMD命令</param>
        </member>
        <member name="T:MedicalSystem.Common.SystemManage.ProcessHelper">
            <summary>
            进程操作类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.ProcessHelper.KillProcess(System.String)">
            <summary>
            杀进程
            </summary>
            <param name="processName">进程名称</param>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.ProcessHelper.StartEXE(System.String)">
            <summary>
            启动exe文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:MedicalSystem.Common.SystemManage.ServiceOperaor">
            <summary>
            服务操作
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.SystemManage.ServiceOperaor.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:MedicalSystem.Common.SystemManage.ServiceOperaor.Start">
            <summary>
            开启
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.SystemManage.ServicesHelper">
            <summary>
            Windows服务操作类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.ServicesHelper.GetOrcleService(System.ServiceProcess.ServiceControllerStatus)">
            <summary>
            Windows服务状态获取
            </summary>
            <param name="status">服务运行状态</param>
            <returns>服务List</returns>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.ServicesHelper.SetServiceStatus(System.String,MedicalSystem.Common.SystemManage.ServiceOperaor)">
            <summary>
            设置服务
            </summary>
            <param name="serviceName">服务名称</param>
            <param name="oper">操作方式</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="T:MedicalSystem.Common.SystemManage.SystemHelper">
            <summary>
            系统操作类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.SystemHelper.GetHostIPList">
            <summary>
            获取IP列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.SystemManage.SystemHelper.CheckIP(System.String)">
            <summary>
            检查IP是否正确
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:MedicalSystem.Common.Utils.EnumHelper">
            <summary>
            枚举帮助
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.Utils.EnumHelper.GetDescription(System.Enum,System.Boolean)">
            <summary>
            扩展方法,获得枚举的Description
            </summary>
            <param name="value">枚举值</param>
            <param name="nameInstead">当枚举值没有定义DescriptionAttribute,是否使用枚举名代替,默认是使用</param>
            <returns>枚举的Description</returns>
        </member>
        <member name="M:MedicalSystem.Common.Utils.EnumHelper.EnumToDictionary(System.Type,System.Func{System.Enum,System.String})">
            <summary>
            把枚举转换为键值对集合
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="getText">获得值得文本</param>
            <returns>以枚举值为key,枚举文本为value的键值对集合</returns>
        </member>
        <member name="T:MedicalSystem.Common.SecretManage.SecretHelper">
            <summary>
            安全加密类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.DesEncrypt(System.String,System.String)">
            <summary>
            加密数据
            </summary>
            <param name="str">明文</param>
            <param name="sKey">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.DesDecrypt(System.String,System.String)">
            <summary>
            解密数据
            </summary>
            <param name="encryptStr">密文</param>
            <param name="sKey">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.DesEncrypt(System.String)">
            <summary>
            加密， 秘钥读取公共配置文件中
            </summary>
            <param name="text">明文</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.DesDecrypt(System.String)">
            <summary>
            解密， 秘钥读取公共配置文件中
            </summary>
            <param name="text">明文</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.GetMd5To32Str(System.String)">
            <summary>
            MD5 32位加密
            </summary>
            <param name="plaintext">明文</param>
            <returns>MD5值</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.GZipCompressString(System.String)">
            <summary>
            将传入字符串以GZip算法压缩后，返回Base64编码字符
            </summary>
            <param name="rawString">需要压缩的字符串</param>
            <returns>压缩后的Base64编码的字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.GZipDecompressString(System.String)">
            <summary>
            将传入的二进制字符串资料以GZip算法解压缩
            </summary>
            <param name="zippedString">经GZip压缩后的二进制字符串</param>
            <returns>原始未压缩字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.GZipCompressByte(System.Byte[])">
            <summary>
            将传入字节数组以GZip算法压缩后，返回Base64编码字符
            </summary>
            <param name="rawData">需要压缩的字节</param>
            <returns>压缩后的Base64编码的字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.GZipDecompressByte(System.String)">
            <summary>
            将传入的二进制字符串资料以GZip算法解压缩
            </summary>
            <param name="zippedString">经GZip压缩后的二进制字符串</param>
            <returns>原始未压缩字节数组</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Compress(System.Byte[])">
            <summary>
            GZip压缩
            </summary>
            <param name="rawData">rawData</param>
            <returns> byte[]</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Decompress(System.Byte[])">
            <summary>
             ZIP解压
            </summary>
            <param name="zippedData">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_Encode(System.String)">
            <summary>
            Base64编码（编码结果的字符串中包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要编码的字符串</param>
            <returns>编码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64编码（编码结果的字符串中包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要编码的字符串</param>
            <param name="Encoding">使用特定的字符编码（默认UTF-8）</param>
            <returns>编码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_Decode(System.String)">
            <summary>
            Base64解码（要解码的字符串可以包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要解码的字符串</param>
            <returns>解码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解码（要解码的字符串可以包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要解码的字符串</param>
            <param name="Encoding">使用特定的字符编码（默认UTF-8）</param>
            <returns>解码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_URL_Encode(System.String)">
            <summary>
            Base64编码（用于URL的改进Base64编码，编码结果的字符串中包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要编码的字符串</param>
            <returns>编码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_URL_Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64编码（用于URL的改进Base64编码，编码结果的字符串中包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要编码的字符串</param>
            <param name="Encoding">使用特定的字符编码（默认UTF-8）</param>
            <returns>编码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_URL_Decode(System.String)">
            <summary>
            Base64解码（用于URL的改进Base64解码，要解码的字符串可以包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要解码的字符串</param>
            <returns>解码后的结果字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.SecretManage.SecretHelper.Base64_URL_Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解码（用于URL的改进Base64解码，要解码的字符串可以包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要解码的字符串</param>
            <param name="Encoding">使用特定的字符编码（默认UTF-8）</param>
            <returns>解码后的结果字符串</returns>
        </member>
        <member name="P:MedicalSystem.Common.SecretManage.SecretHelper.SecretKey">
            <summary>
            获取配置文件中的秘钥
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.DateTimeManage.DateTimeHelper">
            <summary>
            时间相关的算法类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            根据起始时间计算年龄，简单2个日期相减
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="dateFrom">开始时间</param>
            <param name="dateTo">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.CalculateAge(System.DateTime)">
            <summary>
            根据开始时间计算当前年龄
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="dateFrom">开始时间</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.Format(System.DateTime,System.String)">
            <summary>
            DateTime格式化为指定格式的字符串
            </summary>
            <param name="dateTime">时间</param>
            <param name="format">格式化模板</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.Format(System.DateTime)">
            <summary>
            DateTime格式化为应用默认格式的字符串
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.CustomFormat(System.DateTime,System.String)">
            <summary>
            DateTime格式化扩展方法
            </summary>
            <param name="dateTime">时间</param>
            <param name="format">格式化模板</param>
            <example>
            DateTime dt = new DateTime(1970,1,1);
            dt.CustomFormat("yyyy-MM-dd");
            </example>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.CustomFormat(System.DateTime)">
            <summary>
            DateTime格式化扩展方法
            </summary>
            <param name="dateTime">时间</param>
            <example>
            DateTime dt = new DateTime(1970,1,1);
            dt.CustomFormat("yyyy-MM-dd");
            </example>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.CalAge(System.DateTime,System.DateTime)">
            <summary>
            计算年龄,麻醉通用
            </summary>
            <param name="fromDate">出生日期</param>
            <param name="toDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.DateTimeManage.DateTimeHelper.ShowDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算星期几
            </summary>
            <param name="y">年</param>
            <param name="m">月</param>
            <param name="d">日</param>
            <returns></returns>
        </member>
        <member name="F:MedicalSystem.Common.DateTimeManage.DateDifference.monthDay">
            <summary>
            定义天数
            二月在计算中会重定义，用-1先定义
            </summary>
        </member>
        <member name="T:MedicalSystem.Common.ImageManage.ImageHelper">
            <summary>
            图片相关处理
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.CreateBarCodeImage(System.String)">
            <summary>
            生成条形码的图片
            </summary>
            <param name="text">内容</param>
            <returns>图片</returns>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.CreateQRCodeImage(System.String)">
            <summary>
            生成二维码的图片
            </summary>
            <param name="text">内容</param>
            <returns>图片</returns>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.ImageWatermark(System.String,System.String,System.String)">
            <summary>
            图片水印处理方法
            </summary>
            <param name="path">需要加载水印的图片路径（绝对路径）</param>
            <param name="waterpath">水印图片（绝对路径）</param>
            <param name="location">水印位置（传送正确的代码）</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.GetLocation(System.String,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            图片水印位置处理方法
            </summary>
            <param name="location">水印位置</param>
            <param name="img">需要添加水印的图片</param>
            <param name="waterimg">水印图片</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.LetterWatermark(System.String,System.Int32,System.String,System.Drawing.Color,System.String)">
            <summary>
            文字水印处理方法
            </summary>
            <param name="path">图片路径（绝对路径）</param>
            <param name="size">字体大小</param>
            <param name="letter">水印文字</param>
            <param name="color">颜色</param>
            <param name="location">水印位置</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.GetLocation(System.String,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            文字水印位置的方法
            </summary>
            <param name="location">位置代码</param>
            <param name="img">图片对象</param>
            <param name="width">宽(当水印类型为文字时,传过来的就是字体的大小)</param>
            <param name="height">高(当水印类型为文字时,传过来的就是字符的长度)</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.LDPic(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            调整光暗
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.RePic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            反色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.FD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            浮雕处理
            </summary>
            <param name="oldBitmap">原始图片</param>
            <param name="Width">原始图片的长度</param>
            <param name="Height">原始图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片
            </summary>
            <param name="bmp">原始图片</param>
            <param name="newW">新的宽度</param>
            <param name="newH">新的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.FilPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            滤色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.RevPicLR(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            左右翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.RevPicUD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            上下翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.Compress(System.String,System.String)">
            <summary>
            压缩到指定尺寸
            </summary>
            <param name="oldfile">原文件</param>
            <param name="newfile">新文件</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.Gray(System.Drawing.Color)">
            <summary>
            Gray
            </summary>
            <param name="c">颜色</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.BWPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="mybm">要进行处理的图片</param>
            <param name="width">图片的长度</param>
            <param name="height">图片的高度</param>
        </member>
        <member name="M:MedicalSystem.Common.ImageManage.ImageHelper.GetFrames(System.String,System.String)">
            <summary>
            获取图片中的各帧
            </summary>
            <param name="pPath">图片路径</param>
            <param name="pSavedPath">保存路径</param>
        </member>
        <member name="T:MedicalSystem.Common.StringManage.StringHelper">
            <summary>
            字符串相关的处理帮助类
            </summary>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.IsBase64Encoded(System.String)">
            <summary>
            判断字符串是否是BASE64编码。
            </summary>
            <param name="str">BASE64编码的字符串</param>
            <returns><c>true or false</c></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.ReplaceSpace(System.String,System.String[])">
            <summary>
            字符串规范（空格 特殊字符等）
            </summary>
            <param name="str">目标字符串</param>
            <param name="specialStr">需要替换的特殊字符</param>
            <returns>替换特殊字符的字符串</returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.GetPYString(System.String)">
            <summary>
            获取汉字首拼音
            </summary>
            <param name="str">字符串</param>
            <returns>拼音首字母</returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.GetPYChar(System.String)">
            <summary>
            获取字符声母
            </summary>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.CheckIsNumber(System.String)">
            <summary>
            检查是否为数字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.CheckIsDate(System.String)">
            <summary>
            检查是否为日期
            </summary>
            <param name="p_strDate">字符串</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.IsNumber(System.String)">
            <summary>
            是否为数字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Common.StringManage.StringHelper.GetRandNum(System.Int32)">
            <summary>
            取得指定长度随机数
            </summary>
            <param name="randNumLength">位数</param>
            <returns></returns>
        </member>
        <member name="T:MedicalSystem.Configurations.IMdkConfiguration">
            <summary>
            MDK全局配置属性的接口
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.IMdkConfiguration.GetCustomConfig``1">
            <summary>
            获取当前的配置实例
            </summary>
            <typeparam name="T">继承接口<see cref="T:MedicalSystem.Configurations.ISerializedConfig"/>的实例</typeparam>
            <returns></returns>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.AnesVersion">
            <summary>
            麻醉的版本号 - 配置节点<c>mdk/anesVersion/value</c>
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.SecretKey">
            <summary>
            秘钥 - 配置节点<c>mdk/secret/value</c>
            <example>
              <secret value="www.medicalsystem.com.cn" />
            </example>
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.IsLogger">
            <summary>
            是否记录日志 - 配置节点<c>mdk/isLogger/value</c>
            <example>
              <isLogger value="true" />
            </example>
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.Smtp">
            <summary>
            邮箱设置
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.Analysis">
            <summary>
            性能分析配置
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.IMdkConfiguration.XmlDict">
            <summary>
            SQL脚本、配置格式化文件
            </summary>
        </member>
        <member name="T:MedicalSystem.Configurations.ISerializedConfig">
            <summary>
            序列化配置信息接口
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.ISerializedConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            格式化配置节点信息
            </summary>
            <param name="section">配置节点信息</param>
        </member>
        <member name="P:MedicalSystem.Configurations.ISerializedConfig.NodeName">
            <summary>
            当前节点名称, <c>英文字符串，首字母小写。</c>
            </summary>
        </member>
        <member name="T:MedicalSystem.Configurations.MdkConfiguration">
            <summary>
            MDK 扩展配置信息
            </summary>
            <remarks>
            <c>MdkConfiguration</c> 可以重写配置文件， 
            </remarks>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.GetConfig">
            <summary>
            获取当前的配置信息的对象。
            <remarks>
            <c>如果有自定义配置节点，请在程序开始加载的时候【Global文件,Main函数】，添加到配置工程中，调用方法<seealso cref="M:MedicalSystem.Configurations.MdkConfiguration.AddCustomConfig``1"/>。</c>
            </remarks>
            </summary>
            <returns>返回当前的配置项</returns>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.AddCustomConfig``1">
            <summary>
            添加可配置节点，<c>在调用方法GetConfig()之前注册到类中。</c>
            </summary>
            <typeparam name="T">继承接口<see cref="T:MedicalSystem.Configurations.ISerializedConfig"/>的实例</typeparam>
            <returns>返回当前实例</returns>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.GetCustomConfig``1">
            <summary>
            获取当前的配置实例
            </summary>
            <typeparam name="T">继承接口<see cref="T:MedicalSystem.Configurations.ISerializedConfig"/>的实例</typeparam>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.Deserialize(System.Xml.XmlNode)">
            <summary>
            格式化mdk配置节点信息
            </summary>
            <param name="node">mdk节点</param>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.ProcessMatchAnesVersion(System.Xml.XmlNode)">
            <summary>
            读取秘钥节点配置
            </summary>
            <param name="node">mdk/secret</param>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.ProcessMatchSecretKey(System.Xml.XmlNode)">
            <summary>
            读取秘钥节点配置
            </summary>
            <param name="node">mdk/secret</param>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkConfiguration.ProcessMatchIsLogger(System.Xml.XmlNode)">
            <summary>
            读取记录日志节点配置
            </summary>
            <param name="node">mdk/isLogger</param>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.NodeName">
            <summary>
            当前节点名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.AnesVersion">
            <summary>
            麻醉的版本号
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.Smtp">
            <summary>
            邮箱设置
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.Analysis">
            <summary>
            性能分析配置
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.SecretKey">
            <summary>
            加解密的秘钥 - 配置节点<c>mdk/secret/value</c>
            <example>
              <secret key="www.medicalsystem.com.cn" />
            </example>
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.IsLogger">
            <summary>
            是否记录日志  - 配置节点<c>mdk/isLogger/value</c>
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.MdkConfiguration.XmlDict">
            <summary>
            XML读取对象
            </summary>
        </member>
        <member name="T:MedicalSystem.Configurations.MdkSectionHandler">
            <summary>
            MDK 处理对特定的配置节的访问。
            </summary>
            <example>
            <![CDATA[
            <configuration>
              <configSections>
                <section name="mdk" type="MedicalSystem.Configurations.MdkSectionHandler, MedicalSystem.Common"/>
              </configSections>
              <mdk>
                <!--自定义的节点属性配置-->
              </mdk>
            </configuration>
            ]]>
            </example>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkSectionHandler.#ctor">
            <summary>
            初始化新的实例
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置节处理程序。
            </summary>
            <param name="parent">父对象。</param>
            <param name="configContext">配置上下文对象。</param>
            <param name="section">节 XML 节点。</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Configurations.MdkSectionHandler.Deserialize(System.Xml.XmlNode,MedicalSystem.Configurations.MdkConfiguration)">
            <summary>
            序列化当前的配置节点
            </summary>
            <param name="section">节点配置</param>
            <param name="config">配置实例</param>
        </member>
        <member name="T:MedicalSystem.Configurations.AnalysisConfig">
            <summary>
            统计分析配置
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.AnalysisConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            格式化邮箱配置信息
            </summary>
            <param name="section">SMTP节点信息</param>
        </member>
        <member name="P:MedicalSystem.Configurations.AnalysisConfig.NodeName">
            <summary>
            当前节点名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.AnalysisConfig.ConnString">
            <summary>
            连接字符串名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.AnalysisConfig.LogExec">
            <summary>
            获取或设置是否记录执行时间信息
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.AnalysisConfig.LogCount">
            <summary>
            获取或设置是否统计信息
            </summary>
        </member>
        <member name="T:MedicalSystem.Configurations.SmtpConfig">
            <summary>
            邮箱配置信息
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.SmtpConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            格式化邮箱配置信息
            </summary>
            <param name="section">SMTP节点信息</param>
        </member>
        <member name="M:MedicalSystem.Configurations.SmtpConfig.ConfigureFromWebConfigFile">
            <summary>
            Uses the <c>system.net/mailSettings</c> section of the 
            web's config file (web.config) to populate this
            <see cref="T:MedicalSystem.Configurations.SmtpConfig"/>
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.SmtpConfig.ConfigureFromConfig(System.Configuration.Configuration)">
            <summary>
            Uses the <c>system.net/mailSettings</c> section of the 
            provided <see cref="N:MedicalSystem.Configurations"/> to populate this
            <see cref="T:MedicalSystem.Configurations.SmtpConfig"/>
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.NodeName">
            <summary>
            当前节点名称
            </summary>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.Host">
            <summary>
            Gets or sets the smtp host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.Port">
            <summary>
            Gets or sets the smtp port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.Username">
            <summary>
            Gets or sets the smtp username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.Password">
            <summary>
            Gets or sets the smtp password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:MedicalSystem.Configurations.SmtpConfig.UseSsl">
            <summary>
            Gets or sets whether to enable SSL.
            </summary>
        </member>
        <member name="T:MedicalSystem.Configurations.XmlDictConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:MedicalSystem.Services.XmlDict">
            <summary>
            获取xml文件类
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.ReadXmlForSql(System.String)">
            <summary>
            读取Sql对应XML
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.ReadXml(System.String)">
            <summary>
            读取配置对应Xml
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetSQLByKey(System.String)">
            <summary>
            获取对应sql
            </summary>
            <param name="key">对应的key</param>
            <returns>返回sql</returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.ReplaceParamsForSql(System.Collections.Generic.List{MedicalSystem.Common.FileManage.DictXML.DictGroup},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            替换SQL语句中的参数
            </summary>
            <param name="list">配置XML内容</param>
            <param name="resultList">返回结果</param>
            <param name="isAddKey">是否添加key 默认添加</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetDictValues(System.String)">
            <summary>
            配置节点分割字符串
            </summary>
            <param name="val">'全麻','静吸复合全麻','静吸全麻','全身麻醉'</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetValueByKey(System.String)">
            <summary>
            读取XML配置中指定节点的信息
            </summary>
            <param name="key">节点名称</param>
            <returns>返回指定节点的信息</returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetGroupByName(System.String)">
            <summary>
            获取配置XML分组的信息
            </summary>
            <param name="groupname">分组名称</param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetDictXML(System.String)">
            <summary>
            获取DataFormat.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.GetDictXML">
            <summary>
            获取DataFormat.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.Services.XmlDict.SaveDataFormatDict(MedicalSystem.Common.FileManage.DictXML)">
            <summary>
            保存DataFormat.xml
            </summary>
            <param name="dictXml"></param>
            <returns></returns>
        </member>
        <member name="P:MedicalSystem.Services.XmlDict.XmlPathForSql">
            <summary>
            SQL文件路径
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.XmlDict.XmlPath">
            <summary>
            XML配置字典
            </summary>
        </member>
        <member name="M:MedicalSystem.Configurations.XmlDictConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="section"></param>
        </member>
        <member name="P:MedicalSystem.Configurations.XmlDictConfig.NodeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.BaseDataService">
            <summary>
            数据服务类, 全局静态数据, 不能放在泛型中，导致不能共享。
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.BaseDataService.DataServiceConfig">
            <summary>
            数据服务配置信息
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.BaseDataService.generator">
            <summary>
            实例化【代理类生成器】
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.BaseDataService.interceptor">
            <summary>
            实例化【拦截器】
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.BaseDataService.container">
            <summary>
            实例化【IOC容器】
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.BaseDataService`1">
            <summary>
            数据服务类，客户端采用AOP获取当前的请求，所有方法都必须是虚方法，否则无法请求，必须手动操作。
            </summary>
            <typeparam name="T">服务</typeparam>
        </member>
        <member name="M:MedicalSystem.DataServices.BaseDataService`1.#ctor">
            <summary>
            动态代理的构造方法，必须是无参数的，且标记为protected。
            IOC容器使用的构造方法，必须标记为public，供外部使用。
            </summary>
            <remarks>如果没有参数的且使用一个构造方法，则比较为public或不写构造方法即可。</remarks>
        </member>
        <member name="M:MedicalSystem.DataServices.BaseDataService`1.InitConfig">
            <summary>
            默认初始化，读取公共的配置信息服务端地址
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.BaseDataService`1.LoadServiceConfig">
            <summary>
            加载当前服务的配置信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.BaseDataService`1.RegisterServices(Castle.Windsor.WindsorContainer)">
            <summary>
            IOC容器注册第三方的Services服务
            </summary>
            <param name="container">IOC容器</param>
        </member>
        <member name="P:MedicalSystem.DataServices.BaseDataService`1.proxyGenerator">
            <summary>
            实例化【代理类生成器】
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.BaseDataService`1.httpInterceptor">
            <summary>
            实例化【拦截器】
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.BaseDataService`1.windsorContainer">
            <summary>
            实例化【IOC容器】
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.BaseDataService`1.ClientInstance">
            <summary>
            当前数据对象，如果配置文件中配置了服务端地址，则使用AOP方式，如果配置连接字符串名称，则直连数据库。
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.Domain.ResultStatus">
            <summary>
            网络请求结果的状态
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.Domain.ResultStatus.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.Domain.ResultStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.Domain.ResultStatus.Failed">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.Domain.ResultStatus.Exception">
            <summary>
            失败 - 异常
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.Domain.RequestResult`1">
            <summary>
            请求返回对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MedicalSystem.DataServices.Domain.RequestResult">
            <summary>
            请求返回对象
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.Domain.RequestResult.Result">
            <summary>
            请求结果
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.Domain.RequestResult.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.Domain.RequestResult`1.#ctor">
            <summary>
            创建对象
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.Domain.RequestResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.DataServiceConfig">
            <summary>
            配置文件接口基类
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.IDataServiceConfig">
             <summary>
             配置文件接口
             </summary>
             <example>
             <code>
             <![CDATA[
             // 权限安装配置服务
             public class PermissionInstaller
             {
                 // 必须在程序启动前，注册配置信息。
                 public static void RegistConfig()
                 {
                     MdkConfiguration.AddCustomConfig<PermissionConfig>();
                 }
            
                 // 获取当前配置信息
                 internal static IDataServiceConfig GetConfig()
                 {
                     return MdkConfiguration.GetConfig().GetCustomConfig<PermissionConfig>();
                 }
             }
             ]]>
            </code>
             
             <code>
             <![CDATA[
             // 配置文件类
             public class PermissionConfig : IDataServiceConfig, ISerializedConfig
             {
                 #region ISerializedConfig 成员
            
                 public string NodeName
                 {
                     get { return "permission"; }
                 }
            
                 public void Deserialize(System.Xml.XmlNode section)
                 {
                     var WebApiUriAtt = section.Attributes["WebApiUri"];
                     var ConnectionNameAtt = section.Attributes["ConnectionName"];
            
                     if (WebApiUriAtt != null && WebApiUriAtt.Value != String.Empty)
                     {
                         WebApiUri = WebApiUriAtt.Value;
                     }
                     else
                     {
                         WebApiUri = null;
                     }
            
                     if (ConnectionNameAtt != null && ConnectionNameAtt.Value != String.Empty)
                     {
                         ConnectionName = ConnectionNameAtt.Value;
                     }
                     else
                     {
                         ConnectionName = null;
                     }
                 }
            
                 #endregion
            
                 #region IPermissionConfig 成员
            
                 public string WebApiUri { get; private set; }
            
                 public string ConnectionName { get; private set; }
            
                 #endregion
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:MedicalSystem.DataServices.IDataServiceConfig.WebApiUri">
            <summary>
            服务端地址
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.IDataServiceConfig.ConnectionName">
            <summary>
            链接字符串的名称
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.IDataServiceConfig.TimeOut">
            <summary>
            访问服务端超时时长（秒）, 默认值为10
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.DataServiceConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            格式化配置节点信息
            </summary>
            <param name="section">配置节点信息</param>
        </member>
        <member name="P:MedicalSystem.DataServices.DataServiceConfig.NodeName">
            <summary>
            当前节点名称, <c>英文字符串，首字母小写。</c>
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.DataServiceConfig.WebApiUri">
            <summary>
            服务端地址
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.DataServiceConfig.ConnectionName">
            <summary>
            链接字符串的名称
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.DataServiceConfig.TimeOut">
            <summary>
            访问服务端超时时长（秒）
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.HttpAttribute">
            <summary>
            动态代理，Http方式访问服务端
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.IHttpAttribute">
            <summary>
            定义网络接口
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.WebApi.IHttpAttribute.ServiceConfig">
            <summary>
            设置网络配置信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpAttribute.#ctor">
            <summary>
            自动检索路由信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpAttribute.#ctor(System.String)">
            <summary>
            手动设置路由信息
            </summary>
            <param name="rount">路由信息</param>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.HttpAttribute.WEBAPI_VISITOR_TYPE">
            <summary>
            WebApiVisitor类型
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.HttpAttribute.GENERIC_METHOD_CACHE">
            <summary>
            泛型方法的缓存
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpAttribute.GetApiMethod(System.Reflection.MethodInfo)">
            <summary>
            获取当前代理方法的泛型方法，有缓存机制
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpAttribute.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP拦截过滤
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpAttribute.WebApiRequest``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            调用WebApi请求
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="P:MedicalSystem.DataServices.WebApi.HttpAttribute.Rount">
            <summary>
            路由信息
            </summary>
        </member>
        <member name="P:MedicalSystem.DataServices.WebApi.HttpAttribute.ServiceConfig">
            <summary>
            设置网络配置信息
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.HttpGetAttribute">
            <summary>
            动态代理，HttpGet方式访问服务端
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpGetAttribute.#ctor">
            <summary>
            自动检索路由信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpGetAttribute.#ctor(System.String)">
            <summary>
            手动设置路由信息
            </summary>
            <param name="rount">路由信息</param>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpGetAttribute.WebApiRequest``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            调用WebApi请求
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.ServiceInterceptor">
            <summary>
            直连数据库的AOP代理过滤器, 记录查询时间信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.ServiceInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            过滤方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.HttpInterceptor">
            <summary>
            Http请求的AOP代理过滤器
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.HttpInterceptor.METHOD_ATTR_CACHE">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpInterceptor.GetMethodAttrs(System.Reflection.MethodInfo)">
            <summary>
            缓存机制
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            过滤方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="P:MedicalSystem.DataServices.WebApi.HttpInterceptor.ServiceConfig">
            <summary>
            设置网络配置信息
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.HttpPostAttribute">
            <summary>
            动态代理，HttpPost方式访问服务端
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpPostAttribute.#ctor">
            <summary>
            自动检索路由信息
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpPostAttribute.#ctor(System.String)">
            <summary>
            手动设置路由信息
            </summary>
            <param name="rount">路由信息</param>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.HttpPostAttribute.WebApiRequest``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            调用WebApi请求
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.WebApiHandler">
            <summary>
            网络请求，设置Token验证
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.WebApiHandler.setTokenValue(System.String)">
            <summary>
            设置Token值
            </summary>
            <param name="tokenValue">Token值</param>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.WebApiHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            重载异步发送
            </summary>
            <param name="request">请求消息</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:MedicalSystem.DataServices.WebApi.WebApiHandler.TokenValue">
            <summary>
            获取Token值
            </summary>
        </member>
        <member name="T:MedicalSystem.DataServices.WebApi.WebApiVisitor">
            <summary>
            网络访问请求对象
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.WebApiVisitor.TOKENKEY">
            <summary>
            当前链接对象
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.WebApiVisitor.WebApiUri">
            <summary>
            服务端地址
            </summary>
        </member>
        <member name="F:MedicalSystem.DataServices.WebApi.WebApiVisitor.defaultTimeOut">
            <summary>
            默认Web请求超时时长为10秒
            </summary>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.WebApiVisitor.GetHttpClient(System.String,System.Int32)">
            <summary>
            创建当前服务端的长连接对象HttpClient。
            </summary>
            <param name="host">服务端</param>
            <param name="timeout">秒</param>
            <returns>对象</returns>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.WebApiVisitor.GetAccessApi``1(System.String,System.String,System.Int32)">
            <summary>
            GET方式访问WebApi
            </summary>
            <typeparam name="T">序列化类型</typeparam>
            <param name="funcAddress">请求路径</param>
            <param name="webApiUri">当前请求的服务端地址，空白时默认为AppSettings["WebApiUri"]。</param>
            <param name="timeout">超时时长</param>
            <returns>结果</returns>
        </member>
        <member name="M:MedicalSystem.DataServices.WebApi.WebApiVisitor.PostAccessApi``2(System.String,``0,System.String,System.Int32)">
            <summary>
            POST方式访问WebApi
            </summary>
            <typeparam name="T_Request">上传数据的序列化类型</typeparam>
            <typeparam name="T">序列化类型</typeparam>
            <param name="funcAddress">请求路径</param>
            <param name="webApiUri">当前请求的服务端地址，空白时默认为AppSettings["WebApiUri"]。</param>
            <param name="timeout">超时时长</param>
            <param name="t">上传数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:MedicalSystem.Services.Analyser">
            <summary>
            性能分析器，保存在程序根目录的SQLITE3（Analyser.db3）数据库中。
            <example>
            使用方法如下：
            <code>
            Services.Analyser.ExecMinutes(() =&gt;
            {
               Services.Analyser.Count("记录执行次数");
            }, "记录执行时间。");
            </code>
            </example>
            </summary>
            <remarks>
            SQLITE3数据库创建脚本, <see cref="T:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE"/>
            <code>
            CREATE TABLE IF NOT EXISTS MED_EXEC_PERFORMANCE (
            ID  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            EXEC_CLASS  TEXT,
            EXEC_METHOD  TEXT,
            START_DATE  TEXT,
            EXEC_SECONDS  REAL,
            EXEC_MEMO  TEXT
            );
            <code>
            <see cref="T:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE"/>
            </code>
            CREATE TABLE IF NOT EXISTS MED_COUNT_PERFORMANCE (
            ID  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            COUNT_CLASS  TEXT,
            COUNT_METHOD  TEXT,
            START_DATE  TEXT,
            COUNT_MEMO  TEXT
            );
            </code>
            </remarks>
        </member>
        <member name="M:MedicalSystem.Services.Analyser.ExecMinutes(System.Action,System.String)">
            <summary>
            分析当前方法的执行时间。
            <example>
            <code>Analyser.ExecTime(() => { /*业务逻辑*/ });</code>
            </example>
            </summary>
            <param name="action">() => { /*业务逻辑*/ }</param>
            <param name="msg">描述信息</param>
        </member>
        <member name="M:MedicalSystem.Services.Analyser.ExecMinutes``1(System.Func{``0},System.String)">
            <summary>
            分析当前方法的执行时间。
            <example>
            <code><![CDATA[Analyser.ExecTime<T>(() => { return /*业务逻辑*/; });]]></code>
            </example>
            </summary>
            <param name="func">() => { return /*业务逻辑*/; }</param>
            <param name="msg">描述信息</param>
        </member>
        <member name="M:MedicalSystem.Services.Analyser.Count(System.String)">
            <summary>
            统计执行次数
            </summary>
            <param name="msg">描述</param>
        </member>
        <member name="F:MedicalSystem.Services.Analyser.IsSaving">
            <summary>
            当前保存状态
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.Analyser.Save">
            <summary>
            保持到数据库中
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="T:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE">
            <summary>
            性能分析对象
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE.EXEC_CLASS">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE.EXEC_METHOD">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE.START_DATE">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE.EXEC_SECONDS">
            <summary>
            执行秒数
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_EXEC_PERFORMANCE.EXEC_MEMO">
            <summary>
            其他
            </summary>
        </member>
        <member name="T:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE">
            <summary>
            统计执行次数
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE.COUNT_CLASS">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE.COUNT_METHOD">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE.START_DATE">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Analyser.MED_COUNT_PERFORMANCE.COUNT_MEMO">
            <summary>
            其他
            </summary>
        </member>
        <member name="T:Castle.Components.Binder.DefaultConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.Components.Binder.IConverter">
            <summary>
            Depicts the contract for implementations able to convert an object
            -- usually a string -- to the specified desired type.
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.IConverter.Convert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            转换不同类型的数据
            </summary>
            <param name="desiredType">desiredType</param>
            <param name="inputType">inputType</param>
            <param name="input">input</param>
            <param name="conversionSucceeded">conversionSucceeded</param>
            <returns>目标值</returns>
        </member>
        <member name="M:Castle.Components.Binder.IConverter.CanConvert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            是否可以转换不同类型的数据
            </summary>
            <param name="desiredType">desiredType</param>
            <param name="inputType">inputType</param>
            <param name="input">input</param>
            <param name="exactMatch">exactMatch</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.AddConverter(Castle.Components.Binder.IConverter)">
            <summary>
            
            </summary>
            <param name="converter"></param>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.FindConverter(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="desiredType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.CanConvert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="desiredType"></param>
            <param name="inputType"></param>
            <param name="input"></param>
            <param name="exactMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.Convert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="desiredType"></param>
            <param name="inputType"></param>
            <param name="input"></param>
            <param name="conversionSucceeded"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Binder.DefaultConverter.Convert(System.Type,System.Object,System.Boolean@)">
            <summary>
            Convert the input param into the desired type
            </summary>
            <param name="desiredType">Type of the desired</param>
            <param name="input">The input</param>
            <param name="conversionSucceeded">if <c>false</c> the return value must be ignored</param>
            <remarks>
            There are 3 possible cases when trying to convert:
            1) Input data for conversion missing (input is null or an empty String)
            	Returns default conversion value (based on desired type) and set <c>conversionSucceeded = false</c>
            2) Has input data but cannot convert to particular type
            	Throw exception and set <c>conversionSucceeded = false</c>
            3) Has input data and can convert to particular type
            	 Return input converted to desired type and set <c>conversionSucceeded = true</c>
            </remarks>
        </member>
        <member name="T:MedicalSystem.Services.DataSetJsonConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.DataSetJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:MedicalSystem.Services.DataSetJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:MedicalSystem.Services.DataSetJsonConverter.Current">
            <summary>
            当前的转换器对象
            </summary>
        </member>
        <member name="T:MedicalSystem.Services.DataTableJsonConverter">
            <summary>
            Converts a System.Data.DataTable to and from JSON.
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.DataTableJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:MedicalSystem.Services.DataTableJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:MedicalSystem.Services.DataTableJsonConverter.GetColumnDataType(Newtonsoft.Json.JsonToken)">
            <summary>
            识别数据类型
            </summary>
            <param name="tokenType"></param>
            <returns></returns>
        </member>
        <member name="P:MedicalSystem.Services.DataTableJsonConverter.Current">
            <summary>
            当前的转换器对象
            </summary>
        </member>
        <member name="T:MedicalSystem.Services.Converter">
            <summary>
            数据类型转换工具
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.Converter.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.Converter.AddConverter(Castle.Components.Binder.IConverter)">
            <summary>
            添加自定义的转换器
            </summary>
            <param name="converter">转换器</param>
        </member>
        <member name="M:MedicalSystem.Services.Converter.CanConvert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            是否可以转换不同类型的数据
            </summary>
            <param name="desiredType">desiredType</param>
            <param name="inputType">inputType</param>
            <param name="input">input</param>
            <param name="exactMatch">exactMatch</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MedicalSystem.Services.Converter.Convert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            转换不同类型的数据
            </summary>
            <param name="desiredType">desiredType</param>
            <param name="inputType">inputType</param>
            <param name="input">input</param>
            <param name="conversionSucceeded">conversionSucceeded</param>
            <returns>目标值</returns>
        </member>
        <member name="M:MedicalSystem.Services.Converter.Convert(System.Type,System.Object,System.Boolean@)">
            <summary>
            Convert the input param into the desired type
            </summary>
            <param name="desiredType">Type of the desired</param>
            <param name="input">The input</param>
            <param name="conversionSucceeded">if <c>false</c> the return value must be ignored</param>
            <remarks>
            There are 3 possible cases when trying to convert:
            1) Input data for conversion missing (input is null or an empty String)
            	Returns default conversion value (based on desired type) and set <c>conversionSucceeded = false</c>
            2) Has input data but cannot convert to particular type
            	Throw exception and set <c>conversionSucceeded = false</c>
            3) Has input data and can convert to particular type
            	 Return input converted to desired type and set <c>conversionSucceeded = true</c>
            </remarks>
        </member>
        <member name="T:Castle.Components.Binder.TypeConverterBase">
            <summary>
            The Type Converter base class.
            </summary>
        </member>
        <member name="T:Castle.Components.Binder.BindingException">
            <summary>
            转换不同类型值的异常
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.BindingException.#ctor(System.String,System.Object[])">
            <summary>
            转换不同类型值的异常
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.BindingException.#ctor(System.String,System.Exception)">
            <summary>
            转换不同类型值的异常
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.BindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            转换不同类型值的异常
            </summary>
        </member>
        <member name="T:Castle.Components.Binder.ConverterUtil">
            <summary>
            Utility for converting an array of values into valid strings.
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.ConverterUtil.FixInputForMonoIfNeeded(System.Type,System.Object)">
            <summary>
            Fix for mod_mono issue where array values are passed as a comma seperated String.
            </summary>
            <param name="elemType"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Binder.DateTimeConverter">
            <summary>
            Converts to <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.DateTimeConverter.Convert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            Converts the specified desired type.
            </summary>
            <param name="desiredType">Type of the desired.</param>
            <param name="inputType">Type of the input.</param>
            <param name="input">The input.</param>
            <param name="conversionSucceeded">if set to <c>true</c> [conversion succeeded].</param>
            <returns><see cref="T:System.DateTime"/> if conversion successful, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Castle.Components.Binder.DateTimeConverter.CanConvert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            Determines whether this instance can convert the specified desired type.
            </summary>
            <param name="desiredType">Type of the desired.</param>
            <param name="inputType">Type of the input.</param>
            <param name="input">The input.</param>
            <param name="exactMatch">if set to <c>true</c> [exact match].</param>
            <returns>
            	<c>true</c> if this instance can convert the specified desired type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Castle.Components.Binder.DateTimeOffsetConverter">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> converter.
            </summary>
        </member>
        <member name="M:Castle.Components.Binder.DateTimeOffsetConverter.Convert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            Converts the specified desired type.
            </summary>
            <param name="desiredType">Type of the desired.</param>
            <param name="inputType">Type of the input.</param>
            <param name="input">The input.</param>
            <param name="conversionSucceeded">if set to <c>true</c> [conversion succeeded].</param>
            <returns><see cref="T:System.DateTimeOffset"/> if conversion is successful, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Castle.Components.Binder.DateTimeOffsetConverter.CanConvert(System.Type,System.Type,System.Object,System.Boolean@)">
            <summary>
            Determines whether this instance can convert the specified desired type.
            </summary>
            <param name="desiredType">Type of the desired.</param>
            <param name="inputType">Type of the input.</param>
            <param name="input">The input.</param>
            <param name="exactMatch">if set to <c>true</c> [exact match].</param>
            <returns>
            	<c>true</c> if this instance can convert the specified desired type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MedicalSystem.Services.Logger">
            <summary>
            日志记录 - log4net
            </summary>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Debug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug message. 
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a debug message.
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Info(System.String)">
            <summary>
            Logs an info message.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Info(System.String,System.Exception)">
            <summary>
            Logs an info message. 
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs an info message.
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an info message.
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Warn(System.String)">
            <summary>
            Logs a warn message.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Warn(System.String,System.Exception)">
            <summary>
            Logs a warn message. 
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a warn message.
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Error(System.String,System.Exception)">
            <summary>
            Logs an error message. 
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs an error message.
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an error message.
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Fatal(System.String)">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal message. 
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MedicalSystem.Services.Logger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="P:MedicalSystem.Services.Logger.log">
            <summary>
            log4net - ILog
            </summary>
        </member>
        <member name="P:MedicalSystem.Services.Logger.IsLoggerEnabled">
            <summary>
            定义是否记录日志功能
            </summary>
        </member>
        <member name="T:MedicalSystem.ErrorCode">
            <summary>
            错误代码标识
            </summary>
        </member>
        <member name="F:MedicalSystem.ErrorCode.Default">
            <summary>
            默认项
            </summary>
        </member>
        <member name="F:MedicalSystem.ErrorCode.DisabledAnesVersion">
            <summary>
            非法麻醉版本号
            </summary>
        </member>
        <member name="F:MedicalSystem.ErrorCode.NotSupported">
            <summary>
            没有实现的错误
            </summary>
        </member>
        <member name="F:MedicalSystem.ErrorCode.WebApiService">
            <summary>
            WebApi服务的异常信息
            </summary>
        </member>
        <member name="F:MedicalSystem.ErrorCode.WebApiClient">
            <summary>
            WebApi请求的异常信息
            </summary>
        </member>
        <member name="T:MedicalSystem.MdkException">
            <summary>
            Base exception for mdk exceptions
            </summary>
        </member>
        <member name="M:MedicalSystem.MdkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalSystem.MdkException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MedicalSystem.MdkException.#ctor(MedicalSystem.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalSystem.MdkException"/> class.
            </summary>
            <param name="errorCode">The Exception code.</param>
            <param name="errorDesc">The Exception desc.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:MedicalSystem.MdkException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalSystem.MdkException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:MedicalSystem.MdkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalSystem.MdkException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MedicalSystem.MdkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalSystem.MdkException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:MedicalSystem.MdkException.ErrorCode">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="T:MedicalSystem.Program">
            <summary>
            控制台应用程序
            </summary>
        </member>
        <member name="M:MedicalSystem.Program.Main(System.String[])">
            <summary>
            Main入口方法
            </summary>
            <param name="args">参数</param>
        </member>
    </members>
</doc>
