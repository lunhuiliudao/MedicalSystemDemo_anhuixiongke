<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.ORM.v1.1</name>
    </assembly>
    <members>
        <member name="T:Dapper.Data.RequiredAttribute">
            <summary>
            Denotes that a property or class should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:Dapper.Data.KeyAttribute">
            <summary>
            Denotes that a property or class should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:Dapper.Data.DapperContext">
            <summary>
            数据操作基类
            </summary>
        </member>
        <member name="T:Dapper.Data.IDapperContext">
            <summary>
            通用实体类数据接口
            </summary>
        </member>
        <member name="M:Dapper.Data.IDapperContext.SaveChanges">
            <summary>
            保存当前事务中所有的操作记录。
            </summary>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Set``1">
            <summary>
            设置单个实体的数据处理对象
            </summary>
            <typeparam name="TEntity">数据处理对象</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Execute(System.String,System.Object)">
            <summary>
            执行语句，返回受影响的记录数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="param">写法如下：new { }</param>
            <example>
            var parameters = new DynamicParameters();
            parameters.Add("foo", "bar");
            Execute("drop proc SO25069578");
            </example>
        </member>
        <member name="M:Dapper.Data.IDapperContext.ExecuteScalar(System.String,System.Object)">
            <summary>
            查询数据，返回单个数据
            </summary>
        </member>
        <member name="M:Dapper.Data.IDapperContext.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            查询数据，返回单个数据
            </summary>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Query(System.String,System.Object,System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Query``1(System.String,System.Object)">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="M:Dapper.Data.IDapperContext.QueryMultiple(System.String,System.Object)">
            <summary>
            查询数据 
            </summary>
            <returns>查询结果集</returns>
            <example>
            <code>
            <![CDATA[
            var sql = @"
            select * from Customers where CustomerId = @id
            select * from Orders where CustomerId = @id
            select * from Returns where CustomerId = @id";
            using(var multi = connection.QueryMultiple(sql, new{ id =selectedId }))
            {
               var customer = multi.Read<Customer>().Single();
               var orders = multi.Read<Order>().ToList();
               var returns = multi.Read<Return>().ToList();
               ...
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Fill(System.String,System.Object)">
            <summary>
            查询SQL
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Data.IDapperContext.Update(System.Data.DataTable,System.String)">
            <summary>
            整表更新， 
            在JSON序列化时， 请调用MedicalSystem.Services.DataTableAndRowStateConverter来处理，改方法集成了对行的状态的监控。
            </summary>
            <param name="dataTable">表的记录</param>
            <param name="tableName">表名</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="P:Dapper.Data.IDapperContext.DBType">
            <summary>
            数据库驱动类型
            </summary>
        </member>
        <member name="P:Dapper.Data.IDapperContext.Connection">
            <summary>
            数据库连接。
            </summary>
        </member>
        <member name="P:Dapper.Data.IDapperContext.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:Dapper.Data.IDapperContext.CommandTimeout">
            <summary>
            数据库连接的超时时长
            </summary>
        </member>
        <member name="F:Dapper.Data.DapperContext.DefaultConnStringName">
            <summary>
            默认的数据库连接字符串名称
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.#ctor(System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.GetConnSetting(System.String)">
            <summary>
            获取当前连接字符串的信息
            </summary>
            <param name="connStringName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.GetConnection">
            <summary>
            获取当前的数据库连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.SetDatabaseType(System.String)">
            <summary>
            识别数据库驱动类型
            </summary>
            <param name="providerName">驱动名称</param>
        </member>
        <member name="M:Dapper.Data.DapperContext.SaveChanges">
            <summary>
            保存当前事务中所有的操作记录。
            </summary>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.Set``1">
            <summary>
            设置单个实体的数据处理对象
            </summary>
            <typeparam name="TEntity">数据处理对象</typeparam>
            <returns>对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.Execute(System.String,System.Object)">
            <summary>
            执行语句，返回受影响的记录数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="param">写法如下：new { }</param>
            <example>
            var parameters = new DynamicParameters();
            parameters.Add("foo", "bar");
            Execute("drop proc SO25069578");
            </example>
        </member>
        <member name="M:Dapper.Data.DapperContext.ExecuteScalar(System.String,System.Object)">
            <summary>
            查询数据，返回单个数据
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            查询数据，返回单个数据
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.Query(System.String,System.Object,System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.Query``1(System.String,System.Object)">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperContext.QueryMultiple(System.String,System.Object)">
            <summary>
            查询数据 
            </summary>
            <returns>查询结果集</returns>
            <example>
            <code>
            <![CDATA[
            var sql = @"
            select * from Customers where CustomerId = @id
            select * from Orders where CustomerId = @id
            select * from Returns where CustomerId = @id";
            using(var multi = connection.QueryMultiple(sql, new{ id =selectedId }))
            {
               var customer = multi.Read<Customer>().Single();
               var orders = multi.Read<Order>().ToList();
               var returns = multi.Read<Return>().ToList();
               ...
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.Data.DapperContext.Fill(System.String,System.Object)">
            <summary>
            查询SQL
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.Update(System.Data.DataTable,System.String)">
            <summary>
            整表更新， 
            在JSON序列化时， 请调用MedicalSystem.Services.DataTableAndRowStateConverter来处理，改方法集成了对行的状态的监控。
            </summary>
            <param name="dataTable">表的记录</param>
            <param name="tableName">表名</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Dapper.Data.DapperContext.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperContext.DBType">
            <summary>
            数据库驱动类型
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperContext.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperContext.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperContext.CommandTimeout">
            <summary>
            数据库连接的超时时长
            </summary>
        </member>
        <member name="T:Dapper.Data.DapperSet`1">
            <summary>
            单个实体的数据处理对象
            </summary>
            <remarks>查询类的，都是不含事务操作的。</remarks>
            <typeparam name="TEntity">数据表对象</typeparam>
        </member>
        <member name="T:Dapper.Data.IDapperSet`1">
            <summary>
            通用实体类数据接口
            </summary>
            <typeparam name="TEntity">数据表对象</typeparam>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Insert(`0,System.Func{`0,System.Object})">
            <summary>
            插入单个实体对象，插入当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Insert(System.Collections.Generic.List{`0},System.Func{`0,System.Object})">
            <summary>
            插入多个实体对象集合，插入当前对象的指定集合的列
            </summary>
            <param name="item">实体对象的集合</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Delete(`0)">
            <summary>
            删除实体对象，根据主键删除。
            </summary>
            <param name="item">实体对象</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除实体对象，根据主键删除。
            </summary>
            <param name="item">实体对象</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除实体对象，根据条件删除。
            </summary>
            <param name="where">删除的条件</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            更新单个实体对象，根据条件更新当前对象的指定集合的列
            </summary>
            <param name="updateOnly">更新的字段集合（new { Fields = "" }）, 不可为空</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Update(`0,System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新单个实体对象，根据主键更新当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Update(System.Collections.Generic.List{`0},System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            批量更新实体对象，根据主键更新当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询数据集合对象的所有列
            </summary>
            <param name="where">查询的条件</param>
            <returns>返回数据集合对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Select(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询数据集合对象的指定集合的列
            </summary>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">查询的条件</param>
            <returns>返回数据集合对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Single(`0,System.Func{`0,System.Object})">
            <summary>
            根据筛选条件查询单个数据对象的指定集合的列
            </summary>
            <param name="obj">实体对象的主键</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询单个数据对象的所有列
            </summary>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Single(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询单个数据对象的指定集合的列
            </summary>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Scalar(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询指定的单列数据
            </summary>
            <param name="field">指定的单列，不可为空</param>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Save(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            保存方法，判断是否是新增或更新
            </summary>
            <param name="item">当前对象</param>
            <param name="predicate">判断存在的条件</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Save(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            保存方法，判断是否是新增或更新
            </summary>
            <param name="list">当前对象</param>
            <param name="predicate">判断存在的条件</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Dapper.Data.IDapperSet`1.Query(System.String,System.Object,System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.#ctor(Dapper.Data.IDapperContext)">
            <summary>
            初始化对象
            </summary>
            <param name="dapper">Dapper数据库连接对象</param>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Insert(`0,System.Func{`0,System.Object})">
            <summary>
            插入单个实体对象，插入当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Insert(System.Collections.Generic.List{`0},System.Func{`0,System.Object})">
            <summary>
            插入多个实体对象集合，插入当前对象的指定集合的列
            </summary>
            <param name="item">实体对象的集合</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Delete(`0)">
            <summary>
            删除实体对象，根据主键删除。
            </summary>
            <param name="item">实体对象</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除实体对象，根据主键删除。
            </summary>
            <param name="item">实体对象</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除实体对象，根据条件删除。
            </summary>
            <param name="where">删除的条件</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            更新单个实体对象，根据条件更新当前对象的指定集合的列
            </summary>
            <param name="updateOnly">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Update(`0,System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新单个实体对象，根据主键更新当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Update(System.Collections.Generic.List{`0},System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            批量更新实体对象，根据主键更新当前对象的指定集合的列
            </summary>
            <param name="item">实体对象</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">更新的条件，可为空则更新所有行</param>
            <returns>返回受影响的记录数</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询数据集合对象的所有列
            </summary>
            <param name="where">查询的条件</param>
            <returns>返回数据集合对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Select(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询数据集合对象的指定集合的列
            </summary>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">查询的条件</param>
            <returns>返回数据集合对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Single(`0,System.Func{`0,System.Object})">
            <summary>
            根据筛选条件查询单个数据对象的指定集合的列
            </summary>
            <param name="obj">实体对象的主键</param>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询单个数据对象的所有列
            </summary>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Single(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询单个数据对象的指定集合的列
            </summary>
            <param name="onlyFields">插入的字段集合, 默认空则插入所有列，新的类型： new { Fileds = "" }</param>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Scalar(System.Func{`0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据筛选条件查询指定的单列数据
            </summary>
            <param name="field">指定的单列，不可为空</param>
            <param name="where">查询的条件</param>
            <returns>返回数据对象</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Save(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            保存方法，判断是否是新增或更新
            </summary>
            <param name="item">当前对象</param>
            <param name="predicate">判断存在的条件</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Save(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            保存方法，判断是否是新增或更新
            </summary>
            <param name="list">当前对象</param>
            <param name="predicate">判断存在的条件</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Dapper.Data.DapperSet`1.Query(System.String,System.Object,System.Nullable{System.Data.CommandType})">
            <summary>
            查询数据 
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperSet`1.Connection">
            <summary>
            当前数据库连接,主要用于事务处理。
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperSet`1.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:Dapper.Data.DapperSet`1.CommandTimeout">
            <summary>
            数据库连接的超时时长
            </summary>
        </member>
        <member name="T:Dapper.Data.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Dapper.Data.DatabaseType.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Dapper.Data.DatabaseType.SqlServerCE">
            <summary>
            SqlServerCE
            </summary>
        </member>
        <member name="F:Dapper.Data.DatabaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Dapper.Data.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Dapper.Data.DatabaseType.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="T:Dapper.Data.NotMappedAttribute">
            <summary>
            Denotes that a property or class should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:Dapper.Data.TableAttribute">
            <summary>
            Specifies the database table that a class is mapped to.
            </summary>
        </member>
        <member name="M:Dapper.Data.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dapper.Data.TableAttribute"/> class.
            </summary>
            <param name="name"> The name of the table the class is mapped to. </param>
        </member>
        <member name="P:Dapper.Data.TableAttribute.Name">
            <summary>
            The name of the table the class is mapped to.
            </summary>
        </member>
        <member name="P:Dapper.Data.TableAttribute.Schema">
            <summary>
            The schema of the table the class is mapped to.
            </summary>
        </member>
        <member name="T:Dapper.DynamicParameters">
            <summary>
            DynamicParameters
            </summary>
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler(System.Type,Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler``1(Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ReplaceLiterals(Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.CreateParamInfoGenerator(Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeMap(System.Type,Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="E:Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.ContainsKey(System.String)">
            <summary>
            ContainsKey
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.ToList">
            <summary>
            ToList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="M:Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.GetValueType(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="P:Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="P:Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="T:Dapper.Extension.IWhereClauseBuilder`1">
            <summary>
            Represents that the implemented classes are where clause builders that
            builds the WHERE clause for the SQL syntax for relational database systems.
            </summary>
            <typeparam name="T">The type of the data object which would be mapped to
            a certain table in the relational database.</typeparam>
        </member>
        <member name="M:Dapper.Extension.IWhereClauseBuilder`1.BuildWhereClause(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds the WHERE clause from the given expression object.
            </summary>
            <param name="expression">The expression object.</param>
            <returns>The <c>Apworks.Storage.Builders.WhereClauseBuildResult</c> instance
            which contains the build result.</returns>
        </member>
        <member name="T:Dapper.Extension.OracleWhereClauseBuilder`1">
            <summary>
            Represents the WHERE clause builder for SQL Server database.
            </summary>
            <typeparam name="T">The type of the object that will be mapped to a single SQL Server data table.</typeparam>
        </member>
        <member name="T:Dapper.Extension.WhereClauseBuilder`1">
            <summary>
            Represents the base class of all the where clause builders.
            </summary>
            <typeparam name="TDataObject">The type of the data object which would be mapped to
            a certain table in the relational database.</typeparam>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.#ctor">
            <summary>
            Initializes a new instance of <c>WhereClauseBuilderBase&lt;T&gt;</c> class.
            </summary>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.BlockExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.CatchBlock"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DebugInfoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DefaultExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.DynamicExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.GotoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LabelExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LabelTarget"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.LoopExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.SwitchExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.SwitchCase"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.TryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise,
            returns the original expression.</returns>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuilder`1.BuildWhereClause(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds the WHERE clause from the given expression object.
            </summary>
            <param name="expression">The expression object.</param>
            <returns>The <c>Apworks.Storage.Builders.WhereClauseBuildResult</c> instance
            which contains the build result.</returns>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.And">
            <summary>
            Gets a <c>System.String</c> value which represents the AND operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.Or">
            <summary>
            Gets a <c>System.String</c> value which represents the OR operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.Equal">
            <summary>
            Gets a <c>System.String</c> value which represents the EQUAL operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.Not">
            <summary>
            Gets a <c>System.String</c> value which represents the NOT operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.NotEqual">
            <summary>
            Gets a <c>System.String</c> value which represents the NOT EQUAL operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.Like">
            <summary>
            Gets a <c>System.String</c> value which represents the LIKE operation in the WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.LikeSymbol">
            <summary>
            Gets a <c>System.Char</c> value which represents the place-holder for the wildcard in the LIKE operation.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            database parameter.
            </summary>
        </member>
        <member name="M:Dapper.Extension.OracleWhereClauseBuilder`1.#ctor">
            <summary>
            Initializes a new instance of <c>OracleWhereClauseBuilder&lt;T&gt;</c> class.
            </summary>
        </member>
        <member name="P:Dapper.Extension.OracleWhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            SQL Server parameter.
            </summary>
        </member>
        <member name="T:Dapper.Extension.SQLiteWhereClauseBuilder`1">
            <summary>
            Represents the WHERE clause builder for SQL Server database.
            </summary>
            <typeparam name="T">The type of the object that will be mapped to a single SQL Server data table.</typeparam>
        </member>
        <member name="M:Dapper.Extension.SQLiteWhereClauseBuilder`1.#ctor">
            <summary>
            Initializes a new instance of <c>SqlWhereClauseBuilder&lt;T&gt;</c> class.
            </summary>
        </member>
        <member name="P:Dapper.Extension.SQLiteWhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            SQL Server parameter.
            </summary>
        </member>
        <member name="T:Dapper.Extension.MySqlWhereClauseBuilder`1">
            <summary>
            Represents the WHERE clause builder for MySql database.
            </summary>
            <typeparam name="T">The type of the object that will be mapped to a single MySql data table.</typeparam>
        </member>
        <member name="M:Dapper.Extension.MySqlWhereClauseBuilder`1.#ctor">
            <summary>
            Initializes a new instance of <c>SqlWhereClauseBuilder&lt;T&gt;</c> class.
            </summary>
        </member>
        <member name="P:Dapper.Extension.MySqlWhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            SQL Server parameter.
            </summary>
        </member>
        <member name="T:Dapper.Extension.SqlWhereClauseBuilder`1">
            <summary>
            Represents the WHERE clause builder for SQL Server database.
            </summary>
            <typeparam name="T">The type of the object that will be mapped to a single SQL Server data table.</typeparam>
        </member>
        <member name="M:Dapper.Extension.SqlWhereClauseBuilder`1.#ctor">
            <summary>
            Initializes a new instance of <c>SqlWhereClauseBuilder&lt;T&gt;</c> class.
            </summary>
        </member>
        <member name="P:Dapper.Extension.SqlWhereClauseBuilder`1.ParameterChar">
            <summary>
            Gets a <c>System.Char</c> value which represents the leading character to be used by the
            SQL Server parameter.
            </summary>
        </member>
        <member name="T:Dapper.Extension.WhereClauseBuildResult">
            <summary>
            Represents the where clause build result.
            </summary>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuildResult.#ctor">
            <summary>
            Initializes a new instance of <c>WhereClauseBuildResult</c> class.
            </summary>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuildResult.#ctor(System.String,Dapper.DynamicParameters)">
            <summary>
            Initializes a new instance of <c>WhereClauseBuildResult</c> class.
            </summary>
            <param name="whereClause">The <c>System.String</c> value which represents the generated
            WHERE clause.</param>
            <param name="parameterValues">The <c>Dictionary&lt;string, object&gt;</c> instance which contains
            the mapping of the parameters and their values.</param>
        </member>
        <member name="M:Dapper.Extension.WhereClauseBuildResult.ToString">
            <summary>
            Returns a <c>System.String</c> object which represents the content of the Where Clause
            Build Result.
            </summary>
            <returns>A <c>System.String</c> object which represents the content of the Where Clause
            Build Result.</returns>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuildResult.WhereClause">
            <summary>
            Gets or sets a <c>System.String</c> value which represents the generated
            WHERE clause.
            </summary>
        </member>
        <member name="P:Dapper.Extension.WhereClauseBuildResult.ParameterValues">
            <summary>
            Gets or sets a <c>Dictionary&lt;string, object&gt;</c> instance which contains
            the mapping of the parameters and their values.
            </summary>
        </member>
        <member name="T:Dapper.Extension.WhereBuilder">
            <summary>
            Dapper扩展方法
            </summary>
        </member>
        <member name="M:Dapper.Extension.WhereBuilder.GetBuiler``1(System.Data.IDbConnection)">
            <summary>
            获取当前的数据库脚本生成器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Dapper.Extension.DbConnectionExtensions">
            <summary>
            实体对象更新扩展方法类
            </summary>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Insert``2(System.Data.IDbConnection,``0,System.Func{``0,``1},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入记录
            </summary>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.InsertSql``2(System.Data.IDbConnection,``0,System.Func{``0,``1})">
            <summary>
            插入记录
            </summary>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键删除当前记录
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbConn"></param>
            <param name="obj"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbConn"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Update``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbConn"></param>
            <param name="updateOnly"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Update``2(System.Data.IDbConnection,``0,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="dbConn"></param>
            <param name="item"></param>
            <param name="onlyFields"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Select``2(System.Data.IDbConnection,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询所有数据
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="dbConn"></param>
            <param name="onlyFields"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Single``2(System.Data.IDbConnection,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询单行数据
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="dbConn"></param>
            <param name="onlyFields"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Single``2(System.Data.IDbConnection,``0,System.Func{``0,``1},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询单行数据
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="dbConn"></param>
            <param name="obj"></param>
            <param name="onlyFields"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Extension.DbConnectionExtensions.Scalar``2(System.Data.IDbConnection,System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询单个数值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TFields"></typeparam>
            <param name="dbConn"></param>
            <param name="field"></param>
            <param name="where"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Program">
            <summary>
            控制台的入口点
            </summary>
        </member>
        <member name="M:Dapper.Program.Main(System.String[])">
            <summary>
            入口点
            </summary>
            <param name="args">输入参数</param>
        </member>
        <member name="T:Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="M:Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="T:Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="M:Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="P:Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="T:Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
    </members>
</doc>
